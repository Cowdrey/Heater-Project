//*****************************************************************************
//
//	Set up ADC_0 Channel_0 to sample voltage and report.
//
//		Author: 		Gary J. Minden
//		Organization:	KU/EECS/EECS 388
//		Date:			2016-02-29 (B60229)
//		Version:		1.0
//
//		Description:	Sample ADC_0_Channel_0 every 0.5 seconds
//
//		Notes:
//
//*****************************************************************************
//

#include "inc/hw_ints.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_uart.h"

#include <stddef.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdarg.h>
#include <math.h>

#include "driverlib/sysctl.h"
#include "driverlib/adc.h"

#include "FreeRTOS.h"
#include "task.h"

#include "stdio.h"
#include "queue.h"
#include "semphr.h"

typedef struct _dataPacket {
	char name[20];
	uint32_t id;
	uint32_t time;
    float val1;
} dataPacket;

extern volatile xQueueHandle dataQueue;
extern volatile SemaphoreHandle_t xSemaphoreData;
SemaphoreHandle_t xSemaphoreTempData;
extern volatile xQueueHandle PIDQueue;

extern volatile uint32_t xPortSysTickCount;
//
//	Gloabal subroutines and variables
//

//Thermistor Coefficients
float A = 0.003354016;
float B = 0.000256985;
float C = 0.000002620131;
float D = 0.00000006383091;
float Rref = 10000;

//Thermistor circuit constants
float resolution = 4096.0; //12 bits
float refVoltage = 3.3; //volts
float R1 = 5100.0;//R1 Resistor

float GetResistanceOfThermistor (uint32_t ADCvalue) {

	float adcVoltage = (refVoltage * ADCvalue)/resolution;
	float current = (refVoltage - adcVoltage)/R1;
	return (adcVoltage/current);
}

float ConvertResistanceToTemperature (float R) {
	return 1/(A + B * log(R/Rref) + C * pow(log(R/Rref),2.0) + D * pow(log(R/Rref),3));
}

float ConvertKelvinToCelsius (float val) {
	return val-273.0;
}

float ConvertKelvinToFahrenheit (float val) {
	return (val - 273.15)* 1.8000 + 32.00;
}

extern void Task_Simple_ADC0_Ch0( void *pvParameters ) {

	xSemaphoreTempData = xSemaphoreCreateMutex();
	uint32_t	ADC_Value;

	//
	//	Enable (power-on) ADC0
	//
	SysCtlPeripheralEnable( SYSCTL_PERIPH_ADC0 );

	//
	// Enable the first sample sequencer to capture the value of channel 0 when
	// the processor trigger occurs.
	//
	ADCSequenceConfigure(ADC0_BASE, 0, ADC_TRIGGER_PROCESSOR, 0);

	ADCSequenceStepConfigure( ADC0_BASE, 0, 0,
								ADC_CTL_IE | ADC_CTL_END | ADC_CTL_CH0 );

	ADCSequenceEnable( ADC0_BASE, 0 );

	vTaskDelay(configTICK_RATE_HZ);
	while ( 1 )
	{

		//
		// Trigger the sample sequence.
		//
		ADCProcessorTrigger(ADC0_BASE, 0);

		//
		// Wait until the sample sequence has completed.
		//
		while( !ADCIntStatus( ADC0_BASE, 0, false )) {
		}

		//
		// Read the value from the ADC.
		//
		ADCSequenceDataGet(ADC0_BASE, 0, &ADC_Value);
		ADCIntClear( ADC0_BASE, 0 );

		//
		//	Print ADC_Value
		//
		float R = GetResistanceOfThermistor(ADC_Value);
		float temp = ConvertResistanceToTemperature(R);

		if( xSemaphoreTake( xSemaphoreData, ( TickType_t ) 100 ) == pdTRUE )
		{

			dataPacket data1 = {"Resistance", 100, xPortSysTickCount,R};
			xQueueSend(dataQueue, &data1, 100);

			dataPacket data2 = {"Temperature(F)", 200, xPortSysTickCount,ConvertKelvinToFahrenheit(temp)};
			xQueueSend(dataQueue, &data2, 100);
			xQueueSend(PIDQueue, &data2, 100);

            xSemaphoreGive( xSemaphoreData );
		}
		else
		{
			printf("skip adc");
		}

		vTaskDelay(configTICK_RATE_HZ);
	}
}
